"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTopLevelAwait = void 0;
const Visitor_1 = require("@swc/core/Visitor");
// Throw an exception when found top-level await to exit earlier from AST traversal
class FoundTopLevelAwaitError extends Error {
}
class FindTopLevelAwaitVisitor extends Visitor_1.Visitor {
    // Hook class/function visiting functions so we won't enter them while the traversal
    constructor() {
        super();
        const visitor = this;
        function hook(methodName) {
            visitor[methodName] = (node) => node;
        }
        hook("visitClass");
        hook("visitArrowFunctionExpression");
        hook("visitFunction");
    }
    visitAwaitExpression(_expr) {
        throw new FoundTopLevelAwaitError();
    }
    visitForOfStatement(stmt) {
        if (stmt.await) {
            throw new FoundTopLevelAwaitError();
        }
        return super.visitForOfStatement(stmt);
    }
    // Workaround swc-project/swc#3808
    visitOptionalChainingExpression(expression) {
        return this.visitExpression(expression["base"]);
    }
}
function findTopLevelAwait(ast) {
    try {
        new FindTopLevelAwaitVisitor().visitModule(ast);
    }
    catch (e) {
        if (e instanceof FoundTopLevelAwaitError)
            return true;
        /* istanbul ignore next */
        throw e;
    }
    return false;
}
exports.findTopLevelAwait = findTopLevelAwait;
