"use strict";
/// <reference types="jest-extended" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const SWC = __importStar(require("@swc/core"));
const find_1 = require("./find");
function test(hasTopLevelAwait, code) {
    expect((0, find_1.findTopLevelAwait)(SWC.parseSync(code, { target: "es2022", syntax: "ecmascript" }))).toBe(hasTopLevelAwait);
}
describe("Find top-level await usage in module", () => {
    it("should return true with top-level await", () => {
        test(true, `
      await Promise.resolve(0);
    `);
    });
    it("should return true with top-level await in a complex expression", () => {
        test(true, `
      const x = x?.y[fun([await z])];
    `);
    });
    it("should return false without top-level await", () => {
        test(false, `
      console.log("qwq");
    `);
    });
    it("should return true with top-level for-await statements", () => {
        test(true, `
      for await (const x of y) {
        console.log(x);
      }
    `);
    });
    it("should return false with top-level for (non-await) statements", () => {
        test(false, `
      for (const x of y) {
        console.log(x);
      }
    `);
    });
    it("should return true with top-level await in block statements", () => {
        test(true, `
      for (const x of y) {
        if (x === 1) {
          console.log(await x.func());
        }
      }
    `);
    });
    it("should return false with await in functions", () => {
        test(false, `
      console.log(async () => await x.func());
      async function test() {
        for await (const y of x) {
          console.log(y);
        }
      }
    `);
    });
    it("should return false with await in class methods", () => {
        test(false, `
      const Class = class Class {
        async method() {
          await x.func();
        }
      }

      class Class2 {
        async method2() {
          for await (const y of x) {
            console.log(y);
          }
        }
      }
    `);
    });
});
